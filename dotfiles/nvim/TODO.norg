This file is an ongoing list of things I want to implement in my NeoVim setup.

* Make it comfortable for everyday tasks
  The goal is achieved when I can stop using EMACS.

  - (x) Go through EMACS config and populate this list
  - (x) add NeoGit
  - (x) fix NeoGit highlighting issue
  - (x) `SPC b b` - buffer list
  - (x) `SPC g g` - open NeoGit for project
  - (x) Split config into modules like `ai`, `editing`, `git`, `autocompletion`, `lsp`, etc.
        Write an explanatory comment in the beginning of each module.
        All config trick from a single README file should in one plugin definition if possible.
  - (x) Auto pairing parenthesis
  - (x) Relative line numbers by default, absolute on demand
  - (x) Partially stage a file
        Solution: https://github.com/lewis6991/gitsigns.nvim?tab=readme-ov-file
        NeoGit and Diffview does not support it currently
  - (x) Configure autocompletion closer to flow from my EMACS
  -- (x) <C-p> / <C-n> for navigation between options
  -- (x) <Tab> to complete
  -- (x) <C-tab> as prefix for different sources
  --- (x) <C-tab> - LSP
  --- (x) d - words/dabbrev
  --- (x) f - file/path
  --- (x) w - dictionary
  -- (x) <C-b> / <C-f> - for scrolling docs
  -- (_) <C-d> - for open docs
  - (x) Integrate with OS clipboard better
        currently `yy` does not put content to system clipboard
  - ( ) undo window splitting etc change
        like `winner-mode` in EMACS
  - (x) maximize current window
        nvim has it: C-w o
  - (x) `subword-mode`: JumpBetweenCamelizedWords
        consider toggle keybinding
  - (x) undo tree
  - (x) https://github.com/folke/trouble.nvim
  - ( ) make sure that GPT-4o is used
  - ( ) check which undo step is most comfortable for me
        in EMACS I use `(setq evil-want-fine-undo t)`
  - ( ) discover possibilities of using CMD for keybindings
  - ( ) and adjust to MacOS keybindings (CMD-s,f,c,x,v,a; ALT-bckspc,arrows)
  - ( ) analyze possibilities of Telescope and add essential TODOs here
  - ( ) check if something like Dired exists
  - ( ) check if there any improvements to NeoVim help system (like `helpful` package for EMACS)
  - ( ) check how nvim deals with files with the same name, but from different dirs
  - ( ) investigate if there something like `consult-line` or `avy`'s jump to character
  - (x) better tab management: visual representation & keybindings (jumping between tables, closing, renaming)
  - ( ) make sure that spaces used for indentation by default
  - (x) rainbow delimiters
  - ( ) bookmarks management
  - ( ) is there something like `consult-imenu`?
  - ( ) toggle line truncation and word wrapping
  - ( ) project management (list project, jump between projects, search in projects, open in project)
        most probably it's meaningless to copy EMACS behavior here because of Nix Devshells,
        but might be I'm wrong. Need to investigate.
  - ( ) copy file path relative to project root and line number
  - ( ) fast access to list of predefined favorite files
  - ( ) specific keybinding for specific types of completion (files, dabbrev, dictionary, etc)
  - ( ) snippets
  - ( ) GitHub Copilot support
  - ( ) Use GPT-4o for everything
  - ( ) REST client?
  - ( ) Check if there any special `direnv` support
  - ( ) Some fancy dashboard on startup
  - ( ) Nix support: LS, snippets maybe
  - ( ) Elixir support: LS, snippets maybe
  - ( ) Elixir: switching between Lexical and ElixirLS
  - (x) Elixir: run tests
  - (x) Elixir: switch between test and implementation
  - ( ) Ruby: LS maybe, run tests, switch between test & implementation
  - ( ) NeORG: check what I may need and add TODOs here
  - ( ) Markdown: check what neovimers use for it
  - ( ) Docker: controlling from nvim - is it possible like from EMACS?
  - ( ) Terraform: LS support
  - ( ) Go: LS support, running tests
  - ( ) Mastodon client maybe?
  - ( ) JS/TS(X): LS support, maybe running tests
  - ( ) improve help window (`K` keybinding in normal mode)
  -- ( ) bordered window
  -- ( ) how to scroll?
  - ( ) Improve spelling behavior
  -- ( ) make dict setup part of neovim.nix
  -- ( ) consider adding special technical dictionaries
  -- ( ) make it intelligent enough to not mark URL as errors etc
  - ( ) Alternative to EMACS's autofill mode
        (something related called "colorcolumn")
  - ( ) Breadcrumbs + navigation
  -- option 1: https://github.com/SmiteshP/nvim-navbuddy 
  -- option 2: https://github.com/Bekaboo/dropbar.nvim
  - ( ) add overseer to LuaLine
  - ( ) adopt IEx-based test running for Elixir
  - ( ) cheatsheet plugin
  - ( ) integrate trouble & telescope
        https://github.com/folke/trouble.nvim?tab=readme-ov-file#telescope
  - ( ) use all trouble features, especially LSP-related navigational ones
  - ( ) exit from DiffView by pressing `q`
